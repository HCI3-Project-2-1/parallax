[gd_scene load_steps=28 format=3 uid="uid://4t31t1brqj0u"]

[ext_resource type="PackedScene" uid="uid://c1qrm8dbqqafo" path="res://assests/sewers.glb" id="1_asaud"]
[ext_resource type="Script" path="res://scripts/main_camera_sewers.gd" id="2_mu670"]
[ext_resource type="Script" path="res://scripts/third_person_camera.gd" id="3_31gne"]
[ext_resource type="Script" path="res://uiSewer.gd" id="4_8ehvu"]
[ext_resource type="Theme" uid="uid://bq22yreu3b56t" path="res://shaders/theme.tres" id="4_kcifl"]
[ext_resource type="Texture2D" uid="uid://b7x3qxooitt0l" path="res://addons/scene_manager/icon.png" id="5_nv23n"]
[ext_resource type="Script" path="res://scenes/menu_button.gd" id="7_4s8e1"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_u5x10"]
albedo_color = Color(0.127821, 0.173184, 1, 1)

[sub_resource type="PrismMesh" id="PrismMesh_arpfs"]
material = SubResource("StandardMaterial3D_u5x10")
size = Vector3(1, 1.5, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_nt4wb"]
albedo_color = Color(0.127821, 0.173184, 1, 1)

[sub_resource type="PrismMesh" id="PrismMesh_udadn"]
material = SubResource("StandardMaterial3D_nt4wb")
size = Vector3(1, 1.5, 1)

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_a3evo"]

[sub_resource type="Sky" id="Sky_bkx35"]
sky_material = SubResource("ProceduralSkyMaterial_a3evo")

[sub_resource type="Environment" id="Environment_tskj3"]
background_mode = 2
sky = SubResource("Sky_bkx35")
volumetric_fog_enabled = true
volumetric_fog_density = 0.03

[sub_resource type="Shader" id="Shader_s674q"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + TIME * 0.01;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += textureLod(screen_texture, ref_ofs, ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_0h8y3"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ev67w"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_0h8y3")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_1fwl0"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_0h8y3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_itixv"]
render_priority = 0
shader = SubResource("Shader_s674q")
shader_parameter/albedo = Color(0.2, 0.670588, 0.964706, 0.478431)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = null
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.04, 0.04, 0.04)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_1fwl0")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_ev67w")

[sub_resource type="BoxMesh" id="BoxMesh_x0kul"]
material = SubResource("ShaderMaterial_itixv")
size = Vector3(55, 0.6, 2.5)

[sub_resource type="BoxMesh" id="BoxMesh_8hsr7"]
material = SubResource("ShaderMaterial_itixv")
size = Vector3(2.5, 0.6, 20)

[sub_resource type="BoxMesh" id="BoxMesh_eevj5"]
material = SubResource("ShaderMaterial_itixv")
size = Vector3(2.5, 0.6, 10)

[sub_resource type="BoxMesh" id="BoxMesh_8amm0"]
material = SubResource("ShaderMaterial_itixv")
size = Vector3(5, 0.6, 15)

[sub_resource type="BoxMesh" id="BoxMesh_10mma"]
material = SubResource("ShaderMaterial_itixv")
size = Vector3(5, 0.6, 20)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_eafsc"]
bg_color = Color(0.277528, 0.277528, 0.277528, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_o160l"]
bg_color = Color(0.162065, 0.162066, 0.162065, 1)

[sub_resource type="Theme" id="Theme_x1351"]
default_font_size = 40

[node name="Node3D" type="Node3D"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0)

[node name="Sewers" parent="." instance=ExtResource("1_asaud")]

[node name="main_camera" type="Camera3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -26, -0.5, 0)
doppler_tracking = 2
projection = 2
current = true
fov = 120.0
size = 0.02
near = 0.01
far = 150.0
script = ExtResource("2_mu670")

[node name="Node3D" type="MeshInstance3D" parent="main_camera"]
transform = Transform3D(-4.37114e-08, 4.37114e-08, 1, 1, 1.91069e-15, 4.37114e-08, 0, 1, -4.37114e-08, 0, 0, 0)
mesh = SubResource("PrismMesh_arpfs")

[node name="third_person_camera" type="Camera3D" parent="." node_paths=PackedStringArray("main_camera")]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -28, -0.5, 0)
visible = false
current = true
size = 0.001
script = ExtResource("3_31gne")
main_camera = NodePath("../main_camera")

[node name="Node3D" type="MeshInstance3D" parent="third_person_camera"]
transform = Transform3D(-4.37114e-08, 4.37114e-08, 1, 1, 1.91069e-15, 4.37114e-08, 0, 1, -4.37114e-08, 0, 0, 0)
mesh = SubResource("PrismMesh_udadn")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_tskj3")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3, -2, -0.2)
mesh = SubResource("BoxMesh_x0kul")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.5, -2, -0.2)
mesh = SubResource("BoxMesh_8hsr7")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 6.5, -2, -3)
mesh = SubResource("BoxMesh_eevj5")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="."]
transform = Transform3D(-0.260505, 0, -0.965473, 0, 1, 0, 0.965473, 0, -0.260504, 21.1857, -2, 3.37691)
mesh = SubResource("BoxMesh_8amm0")

[node name="MeshInstance3D5" type="MeshInstance3D" parent="."]
transform = Transform3D(-0.996614, 0, -0.0822168, 0, 1, 0, 0.0822168, 0, -0.996614, 29.0697, -2, 14.8292)
mesh = SubResource("BoxMesh_10mma")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-4.37114e-08, 0.173648, -0.984808, 0, 0.984808, 0.173648, 1, 7.5904e-09, -4.30473e-08, -30, 0, 0)
light_angular_distance = 74.54

[node name="ui" type="Control" parent="." node_paths=PackedStringArray("main_camera", "third_person_camera", "delay_label", "third_person_view_toggle", "fixed_angle_toggle", "interpolation_toggle", "settings_visibility_toggle", "settings_container", "settings_panel", "menu_button", "guide_button", "guide_panel", "guide_text", "opaque_panel", "main_camera_sensitivity_slider", "main_camera_follow_speed_slider")]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
rotation = -0.000898182
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 0.0
script = ExtResource("4_8ehvu")
main_camera = NodePath("../main_camera")
third_person_camera = NodePath("../third_person_camera")
delay_label = NodePath("delay_label")
third_person_view_toggle = NodePath("SettingsPanel/SettingsContainer/third_person_view_toggle")
fixed_angle_toggle = NodePath("SettingsPanel/SettingsContainer/fixed_angle_toggle")
interpolation_toggle = NodePath("SettingsPanel/SettingsContainer/interpolation_toggle")
settings_visibility_toggle = NodePath("SettingsPanel/SettingsVisibilityToggle")
settings_container = NodePath("SettingsPanel/SettingsContainer")
settings_panel = NodePath("SettingsPanel")
menu_button = NodePath("MenuButton")
guide_button = NodePath("GuideButton")
guide_panel = NodePath("GuidePanel")
guide_text = NodePath("GuideText")
opaque_panel = NodePath("OpaquePanel")
main_camera_sensitivity_slider = NodePath("SettingsPanel/SettingsContainer/main_camera_sensitivity_slider/main_camera_sensitivity_slider")
main_camera_follow_speed_slider = NodePath("SettingsPanel/SettingsContainer/main_camera_follow_speed_slider/main_camera_follow_speed_slider")

[node name="delay_label" type="Label" parent="ui"]
visible = false
layout_mode = 2
offset_left = 119.978
offset_top = 24.1078
offset_right = 172.978
offset_bottom = 47.1078
text = "foo ms"

[node name="OpaquePanel" type="Panel" parent="ui"]
visible = false
self_modulate = Color(1, 1, 1, 0.901961)
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_eafsc")

[node name="SettingsPanel" type="VBoxContainer" parent="ui"]
layout_mode = 1
offset_left = 20.0
offset_top = 20.0
offset_right = 305.001
offset_bottom = 515.0
scale = Vector2(2, 2)
theme_override_constants/separation = 0

[node name="SettingsVisibilityToggle" type="CheckButton" parent="ui/SettingsPanel"]
layout_mode = 2
size_flags_horizontal = 0

[node name="SettingsContainer" type="VBoxContainer" parent="ui/SettingsPanel"]
visible = false
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0
theme_override_constants/separation = 27

[node name="third_person_view_toggle" type="CheckButton" parent="ui/SettingsPanel/SettingsContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 15
text = "third person view"

[node name="fixed_angle_toggle" type="CheckButton" parent="ui/SettingsPanel/SettingsContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 22
button_pressed = true
text = "fixed angle"

[node name="interpolation_toggle" type="CheckButton" parent="ui/SettingsPanel/SettingsContainer"]
layout_mode = 2
text = "linear interpolation smoothing"

[node name="main_camera_sensitivity_slider" type="VBoxContainer" parent="ui/SettingsPanel/SettingsContainer"]
layout_mode = 2

[node name="label" type="Label" parent="ui/SettingsPanel/SettingsContainer/main_camera_sensitivity_slider"]
layout_mode = 2
text = "main camera sensitivity:"

[node name="main_camera_sensitivity_slider" type="HSlider" parent="ui/SettingsPanel/SettingsContainer/main_camera_sensitivity_slider"]
layout_mode = 2
tooltip_text = "Main Camera Sensivity"
min_value = 10.0
step = 5.0
value = 25.0
rounded = true
ticks_on_borders = true

[node name="main_camera_follow_speed_slider" type="VBoxContainer" parent="ui/SettingsPanel/SettingsContainer"]
layout_mode = 2

[node name="Label" type="Label" parent="ui/SettingsPanel/SettingsContainer/main_camera_follow_speed_slider"]
layout_mode = 2
text = "main camera follow speed:"

[node name="main_camera_follow_speed_slider" type="HSlider" parent="ui/SettingsPanel/SettingsContainer/main_camera_follow_speed_slider"]
layout_mode = 2
min_value = 1.0
max_value = 20.0
value = 20.0
ticks_on_borders = true

[node name="MenuButton" type="MenuButton" parent="ui" node_paths=PackedStringArray("menu")]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -270.0
offset_top = 20.0
offset_right = -20.0
offset_bottom = 70.0
grow_horizontal = 0
theme = ExtResource("4_kcifl")
text = "Select scene"
icon = ExtResource("5_nv23n")
flat = false
expand_icon = true
script = ExtResource("7_4s8e1")
menu = NodePath(".")

[node name="GuidePanel" type="Panel" parent="ui"]
visible = false
self_modulate = Color(1, 1, 1, 0.901961)
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_o160l")

[node name="GuideText" type="Label" parent="ui"]
visible = false
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -856.5
offset_top = -276.0
offset_right = 856.5
offset_bottom = 276.0
grow_horizontal = 2
grow_vertical = 2
theme = SubResource("Theme_x1351")
text = "Getting started:

- Center your face in the frame using the python viewfinder
- Use the \"Select Scene\" button to change scenes
- Check the button at the top left of the screen to view and change scene specific settings"

[node name="GuideButton" type="Button" parent="ui"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -400.019
offset_top = 21.3652
offset_right = -300.019
offset_bottom = 71.3652
grow_horizontal = 0
text = "GUIDE"
